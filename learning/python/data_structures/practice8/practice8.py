"""
1. Реализовать класс «Дата», функция-конструктор которого должна принимать дату в виде строки формата «день-месяц-год».
В рамках класса реализовать два метода. Первый, с декоратором @classmethod. Он должен извлекать число, месяц, год и
преобразовывать их тип к типу «Число». Второй, с декоратором @staticmethod, должен проводить валидацию числа, месяца и
года (например, месяц — от 1 до 12).
Проверить работу полученной структуры на реальных данных.
"""

# class Date:
#     def __init__(self, date: str):
#         self.date = date
#
#     @classmethod
#     def date_from_str_to_int(cls, date):
#         date = date.split('-')
#         i = 0
#         for digit in date:
#             if digit.isdigit():
#                 date[i] = int(date[i])
#             i += 1
#         return date
#
#     @staticmethod
#     def validation_of_date(self, date):
#         self.date = self.date_from_str_to_int(date)
#         if 1 <= self.date[0] <= 31 and 1 <= self.date[1] <= 12:
#             return f'Валидация данных успешна!'
#         else:
#             return f'Данные введены некорректно, проверьте введённые данные'
#
#
# datecore = '01-01-2022'  # Меняя значение переменной, можно посмотерть работу методов
# date_1 = Date(datecore)
# print(date_1.date_from_str_to_int(datecore))
# print(date_1.validation_of_date(date_1, datecore))

"""
2. Создайте собственный класс-исключение, обрабатывающий ситуацию деления на ноль. Проверьте его работу на данных, 
вводимых пользователем. При вводе нуля в качестве делителя программа должна корректно обработать эту ситуацию и не 
завершиться с ошибкой.
"""

# class Zero_own(Exception):
#     def __str__(self):
#         return 'Введите число, отличное от 0!'
#
#
# while True:
#     try:
#         a = input('Введите число a:')
#         b = input('Введите число b, отличное от 0:')
#         a = int(a)
#         b = int(b)
#         if b == 0:
#             raise Zero_own
#         else:
#             c = a / b
#             print(c)
#             break
#     except ValueError:
#         print('Вы ввели не число!')
#     except Zero_own as err:
#         print(err)

"""
3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел. 
Проверить работу исключения на реальном примере. Запрашивать у пользователя данные и заполнять список необходимо только 
числами. Класс-исключение должен контролировать типы данных элементов списка.
Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу 
скрипта, введя, например, команду «stop». При этом скрипт завершается, сформированный список с числами выводится на 
экран.
Подсказка: для этого задания примем, что пользователь может вводить только числа и строки. Во время ввода пользователем 
очередного элемента необходимо реализовать проверку типа элемента. Вносить его в список, только если введено число. 
Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение. 
При этом работа скрипта не должна завершаться.
"""


# class No_digit(Exception):
#     def __str__(self):
#         return 'ВНИМАНИЕ! \n Введённый вами символ не является числом и не добавлен в итоговый список.'
#
#
# result_list = []
# while True:
#     try:
#         number_append_to_result_list = input('\nВведите число,для добавления в список\n'
#                                              'или нажмите "stop", для завершения ввода: \n')
#         if number_append_to_result_list == 'stop':
#             break
#         elif not number_append_to_result_list.isdigit():
#             raise No_digit
#         else:
#             result_list.append(number_append_to_result_list)
#             continue
#     except No_digit as err:
#         print(err)
#
# print(f'Полученный в результате ввода список: {result_list}')

o = []
a = 'aaaaa'
b = 'yyyy'
a1 = 'zzzzz'
b1 = 'ooooo'
c = 'Key'

my_dict = {c: o}
o.append(a)
print(my_dict)
o.append(b)
print(my_dict)
my_dict = {c: o.append(b)}
print(my_dict)