"""
1. Создать список и заполнить его элементами различных типов данных.
Реализовать скрипт проверки типа данных каждого элемента.
Использовать функцию type() для проверки типа.
Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.

"""
# my_list = [1, 2, 3, (1, 4, 9), ['some text', 'some text 2', 7], True, None]
# proverka = len(my_list)
# print(f'элементов в представленном списке:{proverka}')
# i = 0
# for element in my_list:
#     print(f'Тип данных в представленном списке по порядку: {i}', type(element))
#     i = i + 1

"""
2. Для списка реализовать обмен значений соседних элементов, т.е. 
Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д. 
При нечетном количестве элементов последний сохранить на своем месте. 
Для заполнения списка элементов необходимо использовать функцию input().
"""
# Вариант решения задачи №1:

# user_list = list(input('Введите значения:'))
# print('Изначальный список:', user_list)
# a = len(user_list) % 2
# if a != 0:
#     print('В списке нечётное количество элементов!')
# else:
#     print('В списке чётное кол-во элементов!')
# j = 0
# new_list = []
# while j < len(user_list) - 1:
#     new_list.append(user_list[j + 1])
#     new_list.append(user_list[j])
#     j += 2
#     if a != 0 and j == len(user_list) - 1:
#         new_list.append(user_list[-1])
# print('Поменяный список', new_list)

"""
3. Пользователь вводит месяц в виде целого числа от 1 до 12. 
Сообщить к какому времени года относится месяц (зима, весна, лето, осень). 
Напишите решения через list и через dict.

"""
# 1 вариант решения задачи
# user_month = int(input('Введите месяц в виде целого числа:'))
#
# if 3 <= user_month <= 5:
#     print('Весна')
# elif 6 <= user_month <= 8:
#     print('Лето')
# elif 9 <= user_month <= 11:
#     print('Осень')
# else:
#     print('Зима')

# user_month = int(input('Введите месяц в виде целого числа:'))

# 2 Вариант решения задачи
# user_month = int(input('Введите месяц в виде целого очисла:'))
#
# seasons = ['Весна', "Лето", 'Осень', 'Зима']
#
# if 3 <= user_month <= 5:
#     print(seasons[0])
# elif 6 <= user_month <= 8:
#     print(seasons[1])
# elif 9 <= user_month <= 11:
#     print(seasons[2])
# else:
#     print(seasons[3])

# 3 Вариант решения задачи
# user_month = int(input('Введите месяц в виде целого очисла:'))
# seasons = {'a': 'Зима', "b": 'Весна', 'c': 'Лето', 'd': 'Осень'}
#
# if 3 <= user_month <= 5:
#     print(seasons.get('b'))
# elif 6 <= user_month <= 8:
#     print(seasons.get('c'))
# elif 9 <= user_month <= 11:
#     print(seasons.get('d'))
# else:
#     print(seasons.get('a'))


"""
4. Пользователь вводит строку из нескольких слов, разделённых пробелами. 
Вывести каждое слово с новой строки. 
Строки необходимо пронумеровать. Если в слово длинное, 
выводить только первые 10 букв в слове.

"""
# user_string = input('Введите строку из нескольких слов разделённых пробелами:')
# mod_string_to_list = user_string.split()
#
# j = 0
# for word in mod_string_to_list:
#     j += 1
#     if len(word) > 10:
#         print(j, word[:10])
#     else:
#         print(j, word)

"""
5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел. 
У пользователя необходимо запрашивать новый элемент рейтинга. 
Если в рейтинге существуют элементы с одинаковыми значениями, 
то новый элемент с тем же значением должен разместиться после них.
Подсказка. 
Например, набор натуральных чисел: 7, 5, 3, 3, 2.
Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
Набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].

"""
# user_elements = [7, 5, 3, 3, 2]
# print(user_elements)
#
# while True:
#     user_elements.append(int(input('Введите новый элемент рейтинга:')))
#     new_rang_list = sorted(user_elements, reverse=True)
#     print('Новая таблица рангов:', new_rang_list)

"""
6. * Реализовать структуру данных «Товары». 
Она должна представлять собой список кортежей. Каждый кортеж хранит информацию об отдельном товаре. 
В кортеже должно быть два элемента — номер товара и словарь с параметрами (характеристиками товара: название, цена,
количество, единица измерения). Структуру нужно сформировать программно, т.е. запрашивать все данные у пользователя.
Пример готовой структуры:
[
(1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
(2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}), 
(3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
]
Необходимо собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ — 
характеристика товара, например название, а значение — список значений-характеристик, например список названий товаров.
Пример:
{
“название”: [“компьютер”, “принтер”, “сканер”],
“цена”: [20000, 6000, 2000],
“количество”: [5, 2, 7],
“ед”: [“шт.”]
}
"""
# some = {"Название": "Лонгборд", "Цена": 15000, "Количество": 5, "Ед": "шт."}
# some.update({9: 9})
# print(some)

# data_base = [
#     (1, {"Название": "Лонгборд", "Цена": 15000, "Количество": 5, "Ед": "шт."}),
#     (2, {"Название": "Подвеска для лонгборда", "Цена": 5000, "Количество": 12, "Ед": "шт."}),
#     (3, {"Название": "Набор колёс для лонгборда", "Цена": 8000, "Количество": 8, "Ед": "шт."})
# ]
# brake_param = True
# product_number = 0
# core_data_base = []
# while brake_param is True:
#     product_name = input('Введите название товара:')
#     product_price = input('Введите цену товара:')
#     product_count = input('Введите количество товара:')
#     product_measure = input('Введите величину измерения:')
#     variable_data_base = [
#         (product_number,
#          {'Название': product_name, 'Цена': product_price, 'Количество': product_count, 'Ед': product_measure})
#     ]
#     core_data_base.append(variable_data_base[0])
#     print('Хотите добавить новый товар? (да или нет)')
#     brake_param = input('Введите своё решение:')
#     if brake_param == 'нет':
#         # print(variable_data_base)
#         break
#     else:
#         brake_param = True
#         product_number += 1
#         variable_data_base.clear()
#         continue
# for elements in core_data_base:
#     print(elements)
# j = 0  # Счётчик цикла вайл для ключей
# i = 0  # Счётчик цикла вайл для значений
# needed_tup = {}
# keys = []
# values = []
# data_mining_results = {}
# while i < 4:
#     current_value_list = []
#     current_value_list.clear()
#     for lists in core_data_base:
#         # print(lists)
#         for needed_tup in lists:
#             if type(needed_tup) is dict:
#                 # print(needed_tup.keys())
#                 # print(needed_tup.values())
#                 keys = list(needed_tup.keys())
#                 # print(keys[i])
#                 values = list(needed_tup.values())
#                 current_value_list.append(values[i])
#     data_mining_results.update({keys[i]: current_value_list})
#     i += 1
# # print(current_value_list)
# print(data_mining_results)
